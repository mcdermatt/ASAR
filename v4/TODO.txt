DONE:
> install VScode and g++
> hello world c++
> install eigen3
> eigen3 hello world
> test eigen3 matrix ops
> create random point cloud and draw in pcl
> figure out how to draw ellipsoids (GLUT wayy easier than glew)
> make points skewed
> calculate covariance of points
> draw ellipsoid to show covariance of points
> make function for displaying radial bounds
> load in real point cloud data from external file
> fit radial bounds to point cloud data
> adapt code to support drawing multiple voxels
> fit distributions to all points
> accumulate HTWH HTWdz


TODO:
_ Make dedicated ICET script, restrucutre code as single function
_ update loadPointCloudCSV to pass in type of dataset
_ Check condition -> L2 U2 lam
_ get ouster point cloud velodyne msg to Eigen::MatrixXf
_ Implement threading 
_ 


ICE BOX:
_ convert voxels to modern openGL (vbo & vao)
_ convert points to modern openGL
