DONE:
> install VScode and g++
> hello world c++
> install eigen3
> eigen3 hello world
> test eigen3 matrix ops
> create random point cloud and draw in pcl
> figure out how to draw ellipsoids (GLUT wayy easier than glew)
> make points skewed
> calculate covariance of points
> draw ellipsoid to show covariance of points
> make function for displaying radial bounds
> load in real point cloud data from external file
> fit radial bounds to point cloud data
> adapt code to support drawing multiple voxels
> fit distributions to all points
> calculate L and U
> update loadPointCloudCSV to pass in type of dataset
> accumulate HTWH HTWdz
> Check condition -> L2 U2 lam
> Get algorithm to converge
> figure out how to do publisher/ subscriber in ROScpp
> get velodyne point cloud velodyne msg to Eigen::MatrixXf
        sensor_msgs/PointCloud2
> Make dedicated ICET script, restrucutre code as single function
> Make ICET c++ node, output transforms and error bounds
> create and save rosbag of raw sensor data walking around apartment

TODO:
_ concat subsequent point clouds to map
    _ use last transfrom to apply motion correction
_ install gtsam c++
_ Implement threading  


ICE BOX:
_ convert voxels to modern openGL (vbo & vao)
_ convert points to modern openGL
