from vedo import *
import open3d as o3d
import numpy as np
import trimesh
from ipyvtklink.viewer import ViewInteractiveWidget


# Generate synthetic point cloud data
# points = np.random.rand(1000, 3).astype(np.float32)

#load point cloud generated by NeRF
# points = np.load('lidar_nerf_demo/generated_pc1.npy')
pl = '/media/derm/06EF-127D4/Newer College Dataset/new-college-29-01-2020-1cm-resolution-1stSection - mesh.ply'
points = trimesh.load(pl).vertices
points[:,2] = -points[:,2] #flip z
# points = points[::10,:] #downsample

# Create an Open3D point cloud object
pcd = o3d.geometry.PointCloud()
pcd.points = o3d.utility.Vector3dVector(points)

# Estimate normals for the point cloud
pcd.estimate_normals()

# Create a grey color array
num_points = np.asarray(pcd.points).shape[0]
grey_color = np.tile([62/255, 142/255, 222/255], (num_points, 1))

# Assign the grey color to the point cloud
pcd.colors = o3d.utility.Vector3dVector(grey_color)

# Visualize the point cloud
# o3d.visualization.draw_geometries([pcd])

#New~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Create a Visualizer object
vis = o3d.visualization.Visualizer()
vis.create_window()

# Add the point cloud to the visualizer
vis.add_geometry(pcd)

# Get the render option and set point size
render_option = vis.get_render_option()
render_option.point_size = 3.0 

# Run the visualizer
vis.run()
vis.destroy_window()

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Compute a voxel grid from the point cloud
voxel_size = 0.01
voxel_grid = o3d.geometry.VoxelGrid.create_from_point_cloud(pcd, voxel_size=voxel_size)

# Perform Poisson surface reconstruction
mesh, densities = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(pcd, depth=9)
# mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_alpha_shape(voxel_grid, 0.1)

# # Voxelization
# voxel_size = 0.1  # adjust according to your point cloud density
# voxel_grid = o3d.geometry.VoxelGrid.create_from_point_cloud(pcd, voxel_size)

# # Convert voxel grid back to point cloud
# points_from_voxel_grid = np.asarray(voxel_grid.get_voxels()).reshape(-1, 3)

# # Create an Open3D point cloud object from voxel grid points
# pcd_from_voxel_grid = o3d.geometry.PointCloud()
# pcd_from_voxel_grid.points = o3d.utility.Vector3dVector(points_from_voxel_grid)

# # Marching Cubes
# mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_alpha_shape(pcd_from_voxel_grid, 0.1)


# Convert Open3D mesh to vedo mesh
vertices = np.asarray(mesh.vertices)
triangles = np.asarray(mesh.triangles)
faces = [list(triangle) for triangle in triangles]

# Create a vedo mesh
vedo_mesh = Mesh([vertices.tolist(), faces], c = [0.6,0.6,0.6])

disp = []
# disp.append(Points(points, c ='red'))
disp.append(vedo_mesh)

# Render the mesh using vedo
plt = Plotter(N = 1, axes = 4, bg = (1, 1, 1))
plt.show(disp, "Test Render", interactive=True)